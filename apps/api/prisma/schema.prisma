// Athena Pocket - Prisma Schema
// Base de datos PostgreSQL para la aplicaci칩n de supervivencia con IA

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?  // Hash de la contrase침a
  role      UserRole @default(USER)
  isVerified Boolean @default(false)
  isOnline  Boolean  @default(false)
  lastSeen  DateTime?
  avatar    String?
  bio       String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  posts       Post[]
  donations   Donation[]
  messages    Message[] @relation("UserMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  comments    Comment[]
  badges      UserBadge[]

  @@map("users")
}

// Modelo de Post del Blog
model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String
  content     String
  authorId    String
  category    String    @default("General")
  tags        String[]  @default([])
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  publishedAt DateTime?
  readTime    Int       @default(5)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("posts")
}

// Modelo de Donaci칩n
model Donation {
  id          String        @id @default(cuid())
  amount      Float
  donorName   String
  donorEmail  String?
  message     String?
  status      DonationStatus @default(PENDING)
  paymentMethod String      @default("stripe")
  donorId     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relaciones
  donor User? @relation(fields: [donorId], references: [id], onDelete: SetNull)

  @@map("donations")
}

// Modelo de Comentario
model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Modelo de Mensaje Privado
model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  isStarred  Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  sender   User @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Modelo de Insignia
model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  requirement Float
  category    String
  rarity      BadgeRarity @default(COMMON)
  createdAt   DateTime @default(now())

  // Relaciones
  userBadges UserBadge[]

  @@map("badges")
}

// Modelo de relaci칩n Usuario-Insignia
model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())

  // Relaciones
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// Enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}
